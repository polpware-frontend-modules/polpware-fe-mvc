import { fromEvent } from 'rxjs';
import { debounceTime, buffer, map } from 'rxjs/operators';
import * as hInterface from '@polpware/fe-dependencies';
import { pushArray } from '@polpware/fe-utilities';
import { WritableListMediator } from './writable-abstract-list';
const _ = hInterface.underscore;
function mergeArgs(data) {
    const finalSet = {
        add: false,
        remove: false,
        merge: false,
        changes: {
            added: [],
            removed: [],
            merged: []
        }
    };
    data.forEach((elem) => {
        const changeSet = elem[1];
        if (changeSet.changes.added && changeSet.changes.added.length > 0) {
            pushArray(finalSet.changes.added, changeSet.changes.added);
            finalSet.add = true;
        }
        if (changeSet.changes.removed && changeSet.changes.removed.length > 0) {
            pushArray(finalSet.changes.removed, changeSet.changes.removed);
            finalSet.remove = true;
        }
        if (changeSet.changes.merged && changeSet.changes.merged.length > 0) {
            pushArray(finalSet.changes.merged, changeSet.changes.merged);
            finalSet.merge = true;
        }
    });
    return finalSet;
}
export const RxjsPoweredWritableListMediator = WritableListMediator.extend({
    Properties: 'globalSubr, emitEventDelay',
    init: function (settings) {
        const self = this;
        self._super(settings);
        self._globalSubr = null;
        self._emitEventDelay = 1000;
    },
    /**
         * Starts to listen to the change on the global provider.
         * It is usually used internally on setting up this mediator.
         * @param {Object} globalProvider
         */
    startListeningGlobalProvider: function (globalProvider) {
        const self = this;
        self._globalProvider = globalProvider;
        const eventObserver = fromEvent(globalProvider, 'update');
        const ctrlObserver = eventObserver.pipe(debounceTime(self._emitEventDelay));
        self._globalSubr = eventObserver.pipe(buffer(ctrlObserver), map((col) => {
            const x = mergeArgs(col);
            return x;
        })).subscribe(args => {
            self.onGlobalProviderUpdate.apply(self, [null, args]);
        });
    },
    /**
        * Stops listening to the change on the global provider.
        * It is usally used on the tearing down this mediator.
        */
    stopListeningGlobalProvider: function () {
        const self = this;
        const globalProvider = self._globalProvider;
        if (self._globalSubr) {
            self._globalSubr.unsubscribe();
            self._globalSubr = null;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnhqcy1wb3dlcmVkLXdyaXRhYmxlLWFic3RyYWN0LWxpc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9scHdhcmUvZmUtbXZjLyIsInNvdXJjZXMiOlsibGliL21lZGlhdG9ycy9yeGpzLXBvd2VyZWQtd3JpdGFibGUtYWJzdHJhY3QtbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRCxPQUFPLEtBQUssVUFBVSxNQUFNLDJCQUEyQixDQUFDO0FBRXhELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVuRCxPQUFPLEVBR0gsb0JBQW9CLEVBRXZCLE1BQU0sMEJBQTBCLENBQUM7QUFFbEMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQztBQWFoQyxTQUFTLFNBQVMsQ0FBQyxJQUFXO0lBQzFCLE1BQU0sUUFBUSxHQUFtQjtRQUM3QixHQUFHLEVBQUUsS0FBSztRQUNWLE1BQU0sRUFBRSxLQUFLO1FBQ2IsS0FBSyxFQUFFLEtBQUs7UUFDWixPQUFPLEVBQUU7WUFDTCxLQUFLLEVBQUUsRUFBRTtZQUNULE9BQU8sRUFBRSxFQUFFO1lBQ1gsTUFBTSxFQUFFLEVBQUU7U0FDYjtLQUNKLENBQUM7SUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBVyxFQUFFLEVBQUU7UUFDekIsTUFBTSxTQUFTLEdBQWUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvRCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzRCxRQUFRLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztTQUN2QjtRQUNELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuRSxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvRCxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUMxQjtRQUNELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqRSxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RCxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztTQUN6QjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztJQUN2RSxVQUFVLEVBQUUsNEJBQTRCO0lBRXhDLElBQUksRUFBRSxVQUFTLFFBQTBDO1FBQ3JELE1BQU0sSUFBSSxHQUFzQyxJQUFJLENBQUM7UUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7V0FJTztJQUNQLDRCQUE0QixFQUFFLFVBQVMsY0FBYztRQUNqRCxNQUFNLElBQUksR0FBc0MsSUFBSSxDQUFDO1FBQ3JELElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO1FBRXRDLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDMUQsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFFNUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUNqQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQ3BCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ1IsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQ0wsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZixJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7VUFHTTtJQUNOLDJCQUEyQixFQUFFO1FBQ3pCLE1BQU0sSUFBSSxHQUFzQyxJQUFJLENBQUM7UUFDckQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUM1QyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUMzQjtJQUNMLENBQUM7Q0FFSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBidWZmZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0ICogYXMgaEludGVyZmFjZSBmcm9tICdAcG9scHdhcmUvZmUtZGVwZW5kZW5jaWVzJztcblxuaW1wb3J0IHsgcHVzaEFycmF5IH0gZnJvbSAnQHBvbHB3YXJlL2ZlLXV0aWxpdGllcyc7XG5cbmltcG9ydCB7XG4gICAgSVdyaXRhYmxlTGlzdE1lZGlhdG9yRGV2LFxuICAgIElDaGFuZ2VTZXQsXG4gICAgV3JpdGFibGVMaXN0TWVkaWF0b3IsXG4gICAgSVdyaXRhYmxlTGlzdE1lZGlhdG9yQ3Rvck9wdGlvbnNcbn0gZnJvbSAnLi93cml0YWJsZS1hYnN0cmFjdC1saXN0JztcblxuY29uc3QgXyA9IGhJbnRlcmZhY2UudW5kZXJzY29yZTtcblxuZXhwb3J0IGludGVyZmFjZSBJUnhqc1Bvd2VyZWREaXJDb250ZW50TWVkaWF0b3JEZXYgZXh0ZW5kcyBJV3JpdGFibGVMaXN0TWVkaWF0b3JEZXYge1xuICAgIF9lbWl0RXZlbnREZWxheTogbnVtYmVyO1xuICAgIF9nbG9iYWxTdWJyOiBTdWJzY3JpcHRpb247XG59XG5cbmludGVyZmFjZSBJRnVsbENoYW5nZVNldCBleHRlbmRzIElDaGFuZ2VTZXQge1xuICAgIGFkZDogYm9vbGVhbjtcbiAgICByZW1vdmU6IGJvb2xlYW47XG4gICAgbWVyZ2U6IGJvb2xlYW47XG59XG5cbmZ1bmN0aW9uIG1lcmdlQXJncyhkYXRhOiBhbnlbXSk6IElDaGFuZ2VTZXQge1xuICAgIGNvbnN0IGZpbmFsU2V0OiBJRnVsbENoYW5nZVNldCA9IHtcbiAgICAgICAgYWRkOiBmYWxzZSxcbiAgICAgICAgcmVtb3ZlOiBmYWxzZSxcbiAgICAgICAgbWVyZ2U6IGZhbHNlLFxuICAgICAgICBjaGFuZ2VzOiB7XG4gICAgICAgICAgICBhZGRlZDogW10sXG4gICAgICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgICAgIG1lcmdlZDogW11cbiAgICAgICAgfVxuICAgIH07XG4gICAgZGF0YS5mb3JFYWNoKChlbGVtOiBhbnlbXSkgPT4ge1xuICAgICAgICBjb25zdCBjaGFuZ2VTZXQ6IElDaGFuZ2VTZXQgPSBlbGVtWzFdO1xuICAgICAgICBpZiAoY2hhbmdlU2V0LmNoYW5nZXMuYWRkZWQgJiYgY2hhbmdlU2V0LmNoYW5nZXMuYWRkZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcHVzaEFycmF5KGZpbmFsU2V0LmNoYW5nZXMuYWRkZWQsIGNoYW5nZVNldC5jaGFuZ2VzLmFkZGVkKTtcbiAgICAgICAgICAgIGZpbmFsU2V0LmFkZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZVNldC5jaGFuZ2VzLnJlbW92ZWQgJiYgY2hhbmdlU2V0LmNoYW5nZXMucmVtb3ZlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwdXNoQXJyYXkoZmluYWxTZXQuY2hhbmdlcy5yZW1vdmVkLCBjaGFuZ2VTZXQuY2hhbmdlcy5yZW1vdmVkKTtcbiAgICAgICAgICAgIGZpbmFsU2V0LnJlbW92ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZVNldC5jaGFuZ2VzLm1lcmdlZCAmJiBjaGFuZ2VTZXQuY2hhbmdlcy5tZXJnZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcHVzaEFycmF5KGZpbmFsU2V0LmNoYW5nZXMubWVyZ2VkLCBjaGFuZ2VTZXQuY2hhbmdlcy5tZXJnZWQpO1xuICAgICAgICAgICAgZmluYWxTZXQubWVyZ2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmluYWxTZXQ7XG59XG5cbmV4cG9ydCBjb25zdCBSeGpzUG93ZXJlZFdyaXRhYmxlTGlzdE1lZGlhdG9yID0gV3JpdGFibGVMaXN0TWVkaWF0b3IuZXh0ZW5kKHtcbiAgICBQcm9wZXJ0aWVzOiAnZ2xvYmFsU3ViciwgZW1pdEV2ZW50RGVsYXknLFxuXG4gICAgaW5pdDogZnVuY3Rpb24oc2V0dGluZ3M6IElXcml0YWJsZUxpc3RNZWRpYXRvckN0b3JPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNlbGY6IElSeGpzUG93ZXJlZERpckNvbnRlbnRNZWRpYXRvckRldiA9IHRoaXM7XG4gICAgICAgIHNlbGYuX3N1cGVyKHNldHRpbmdzKTtcbiAgICAgICAgc2VsZi5fZ2xvYmFsU3ViciA9IG51bGw7XG4gICAgICAgIHNlbGYuX2VtaXRFdmVudERlbGF5ID0gMTAwMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgICAqIFN0YXJ0cyB0byBsaXN0ZW4gdG8gdGhlIGNoYW5nZSBvbiB0aGUgZ2xvYmFsIHByb3ZpZGVyLlxuICAgICAgICAgKiBJdCBpcyB1c3VhbGx5IHVzZWQgaW50ZXJuYWxseSBvbiBzZXR0aW5nIHVwIHRoaXMgbWVkaWF0b3IuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBnbG9iYWxQcm92aWRlclxuICAgICAgICAgKi9cbiAgICBzdGFydExpc3RlbmluZ0dsb2JhbFByb3ZpZGVyOiBmdW5jdGlvbihnbG9iYWxQcm92aWRlcikge1xuICAgICAgICBjb25zdCBzZWxmOiBJUnhqc1Bvd2VyZWREaXJDb250ZW50TWVkaWF0b3JEZXYgPSB0aGlzO1xuICAgICAgICBzZWxmLl9nbG9iYWxQcm92aWRlciA9IGdsb2JhbFByb3ZpZGVyO1xuXG4gICAgICAgIGNvbnN0IGV2ZW50T2JzZXJ2ZXIgPSBmcm9tRXZlbnQoZ2xvYmFsUHJvdmlkZXIsICd1cGRhdGUnKTtcbiAgICAgICAgY29uc3QgY3RybE9ic2VydmVyID0gZXZlbnRPYnNlcnZlci5waXBlKGRlYm91bmNlVGltZShzZWxmLl9lbWl0RXZlbnREZWxheSkpO1xuXG4gICAgICAgIHNlbGYuX2dsb2JhbFN1YnIgPSBldmVudE9ic2VydmVyLnBpcGUoXG4gICAgICAgICAgICBidWZmZXIoY3RybE9ic2VydmVyKSxcbiAgICAgICAgICAgIG1hcCgoY29sKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IG1lcmdlQXJncyhjb2wpO1xuICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKS5zdWJzY3JpYmUoYXJncyA9PiB7XG4gICAgICAgICAgICBzZWxmLm9uR2xvYmFsUHJvdmlkZXJVcGRhdGUuYXBwbHkoc2VsZiwgW251bGwsIGFyZ3NdKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICAqIFN0b3BzIGxpc3RlbmluZyB0byB0aGUgY2hhbmdlIG9uIHRoZSBnbG9iYWwgcHJvdmlkZXIuXG4gICAgICAgICogSXQgaXMgdXNhbGx5IHVzZWQgb24gdGhlIHRlYXJpbmcgZG93biB0aGlzIG1lZGlhdG9yLlxuICAgICAgICAqL1xuICAgIHN0b3BMaXN0ZW5pbmdHbG9iYWxQcm92aWRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHNlbGY6IElSeGpzUG93ZXJlZERpckNvbnRlbnRNZWRpYXRvckRldiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGdsb2JhbFByb3ZpZGVyID0gc2VsZi5fZ2xvYmFsUHJvdmlkZXI7XG4gICAgICAgIGlmIChzZWxmLl9nbG9iYWxTdWJyKSB7XG4gICAgICAgICAgICBzZWxmLl9nbG9iYWxTdWJyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBzZWxmLl9nbG9iYWxTdWJyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxufSk7XG5cbiJdfQ==