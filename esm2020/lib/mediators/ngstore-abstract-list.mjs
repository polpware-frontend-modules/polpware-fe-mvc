import { ListMediator } from './abstract-list';
export const NgStoreListMediator = ListMediator.extend({
    init: function (settings) {
        const self = this;
        self._super(settings);
        self._ngStore = null;
    },
    setNgStore: function (store) {
        const self = this;
        self._ngStore = store;
    },
    getNgStore: function () {
        const self = this;
        return self._ngStore;
    },
    safelyReadDataProvider: function () {
        const self = this;
        const models = self._super();
        // Safely push these models into view level data provider
        self._ngStore.add(models);
        // Then return
        return models;
    },
    /**
     * Override.
     * This method uses the data from the ngstore, instead of the
     * the current remote data provider, to generate the list of data
     * to be rendered.
     */
    renderData: function (async) {
        const self = this;
        const $data = self._viewInstance.$data;
        $data.clean();
        $data.hasMoreData(self._dataProvider.hasNextPage());
        const subscription = self._ngStore.getState().subscribe(savedData => {
            const newData = self.generateItemsInternal(savedData.items);
            if (async === true) {
                $data.asyncPush(newData);
            }
            else {
                $data.syncPush(newData);
            }
            setTimeout(() => {
                subscription.unsubscribe();
            }, 1);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdzdG9yZS1hYnN0cmFjdC1saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9scHdhcmUvZmUtbXZjL3NyYy9saWIvbWVkaWF0b3JzL25nc3RvcmUtYWJzdHJhY3QtbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQ0gsWUFBWSxFQUlmLE1BQU0saUJBQWlCLENBQUM7QUFnQnpCLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFFbkQsSUFBSSxFQUFFLFVBQVMsUUFBa0M7UUFDN0MsTUFBTSxJQUFJLEdBQTRCLElBQUksQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxVQUFVLEVBQUUsVUFBcUMsS0FBMEI7UUFDdkUsTUFBTSxJQUFJLEdBQTRCLElBQUksQ0FBQztRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsVUFBVSxFQUFFO1FBQ1IsTUFBTSxJQUFJLEdBQTRCLElBQUksQ0FBQztRQUMzQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELHNCQUFzQixFQUFFO1FBQ3BCLE1BQU0sSUFBSSxHQUE0QixJQUFJLENBQUM7UUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzdCLHlEQUF5RDtRQUN6RCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixjQUFjO1FBQ2QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsVUFBVSxFQUFFLFVBQVMsS0FBZTtRQUNoQyxNQUFNLElBQUksR0FBNEIsSUFBSSxDQUFDO1FBQzNDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNkLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBRXBELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBRWhFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO2dCQUNoQixLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzVCO2lCQUFNO2dCQUNILEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDM0I7WUFFRCxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNaLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDVixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgSUNvbGxlY3Rpb25JdGVtLCBJQ29sbGVjdGlvblN0b3JlXHJcbn0gZnJvbSAnQHBvbHB3YXJlL2ZlLWRhdGEnO1xyXG5cclxuXHJcbmltcG9ydCB7XHJcbiAgICBMaXN0TWVkaWF0b3IsXHJcbiAgICBJTGlzdE1lZGlhdG9yQ3Rvck9wdGlvbnMsXHJcbiAgICBJTGlzdE1lZGlhdG9yUHVibGljLFxyXG4gICAgSUxpc3RNZWRpYXRvckRldlxyXG59IGZyb20gJy4vYWJzdHJhY3QtbGlzdCc7XHJcblxyXG5leHBvcnQge1xyXG4gICAgSUxpc3RNZWRpYXRvckN0b3JPcHRpb25zLFxyXG59IGZyb20gJy4vYWJzdHJhY3QtbGlzdCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElOZ1N0b3JlTGlzdE1lZGlhdG9yUHVibGljIGV4dGVuZHMgSUxpc3RNZWRpYXRvclB1YmxpYyB7XHJcbiAgICBzZXROZ1N0b3JlPFQgZXh0ZW5kcyBJQ29sbGVjdGlvbkl0ZW0+KHN0b3JlOiBJQ29sbGVjdGlvblN0b3JlPFQ+KTogdm9pZDtcclxuICAgIGdldE5nU3RvcmU8VCBleHRlbmRzIElDb2xsZWN0aW9uSXRlbT4oKTogSUNvbGxlY3Rpb25TdG9yZTxUPjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTmdTdG9yZUxpc3RNZWRpYXRvckRldiBleHRlbmRzIElMaXN0TWVkaWF0b3JEZXYge1xyXG4gICAgX25nU3RvcmU6IElDb2xsZWN0aW9uU3RvcmU8YW55PjtcclxuICAgIF9zdXBlcih2YWx1ZT86IGFueSk6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5nU3RvcmVMaXN0TWVkaWF0b3IgPSBMaXN0TWVkaWF0b3IuZXh0ZW5kKHtcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbihzZXR0aW5nczogSUxpc3RNZWRpYXRvckN0b3JPcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZjogSU5nU3RvcmVMaXN0TWVkaWF0b3JEZXYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuX3N1cGVyKHNldHRpbmdzKTtcclxuICAgICAgICBzZWxmLl9uZ1N0b3JlID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0TmdTdG9yZTogZnVuY3Rpb24gPFQgZXh0ZW5kcyBJQ29sbGVjdGlvbkl0ZW0+KHN0b3JlOiBJQ29sbGVjdGlvblN0b3JlPFQ+KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc2VsZjogSU5nU3RvcmVMaXN0TWVkaWF0b3JEZXYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuX25nU3RvcmUgPSBzdG9yZTtcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0TmdTdG9yZTogZnVuY3Rpb24gPFQgZXh0ZW5kcyBJQ29sbGVjdGlvbkl0ZW0+KCk6IElDb2xsZWN0aW9uU3RvcmU8VD4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGY6IElOZ1N0b3JlTGlzdE1lZGlhdG9yRGV2ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gc2VsZi5fbmdTdG9yZTtcclxuICAgIH0sXHJcblxyXG4gICAgc2FmZWx5UmVhZERhdGFQcm92aWRlcjogZnVuY3Rpb24oKTogYW55W10ge1xyXG4gICAgICAgIGNvbnN0IHNlbGY6IElOZ1N0b3JlTGlzdE1lZGlhdG9yRGV2ID0gdGhpcztcclxuICAgICAgICBjb25zdCBtb2RlbHMgPSBzZWxmLl9zdXBlcigpO1xyXG4gICAgICAgIC8vIFNhZmVseSBwdXNoIHRoZXNlIG1vZGVscyBpbnRvIHZpZXcgbGV2ZWwgZGF0YSBwcm92aWRlclxyXG4gICAgICAgIHNlbGYuX25nU3RvcmUuYWRkKG1vZGVscyk7XHJcbiAgICAgICAgLy8gVGhlbiByZXR1cm5cclxuICAgICAgICByZXR1cm4gbW9kZWxzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIE92ZXJyaWRlLlxyXG4gICAgICogVGhpcyBtZXRob2QgdXNlcyB0aGUgZGF0YSBmcm9tIHRoZSBuZ3N0b3JlLCBpbnN0ZWFkIG9mIHRoZVxyXG4gICAgICogdGhlIGN1cnJlbnQgcmVtb3RlIGRhdGEgcHJvdmlkZXIsIHRvIGdlbmVyYXRlIHRoZSBsaXN0IG9mIGRhdGFcclxuICAgICAqIHRvIGJlIHJlbmRlcmVkLlxyXG4gICAgICovXHJcbiAgICByZW5kZXJEYXRhOiBmdW5jdGlvbihhc3luYz86IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBzZWxmOiBJTmdTdG9yZUxpc3RNZWRpYXRvckRldiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgJGRhdGEgPSBzZWxmLl92aWV3SW5zdGFuY2UuJGRhdGE7XHJcbiAgICAgICAgJGRhdGEuY2xlYW4oKTtcclxuICAgICAgICAkZGF0YS5oYXNNb3JlRGF0YShzZWxmLl9kYXRhUHJvdmlkZXIuaGFzTmV4dFBhZ2UoKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHNlbGYuX25nU3RvcmUuZ2V0U3RhdGUoKS5zdWJzY3JpYmUoc2F2ZWREYXRhID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0RhdGEgPSBzZWxmLmdlbmVyYXRlSXRlbXNJbnRlcm5hbChzYXZlZERhdGEuaXRlbXMpO1xyXG4gICAgICAgICAgICBpZiAoYXN5bmMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICRkYXRhLmFzeW5jUHVzaChuZXdEYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRkYXRhLnN5bmNQdXNoKG5ld0RhdGEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG4iXX0=