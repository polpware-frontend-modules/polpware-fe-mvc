{"version":3,"sources":["ng://@polpware/fe-mvc/lib/mediators/noop-view-instance.ts","ng://@polpware/fe-mvc/lib/mediators/abstract-list.ts","ng://@polpware/fe-mvc/lib/mediators/ngstore-abstract-list.ts","ng://@polpware/fe-mvc/lib/mediators/writable-abstract-list.ts","ng://@polpware/fe-mvc/lib/mediators/rxjs-powered-writable-abstract-list.ts","ng://@polpware/fe-mvc/lib/controllers/list-controller.ts"],"names":["noop","dependencies.underscore","noopViewInstance","$data","init","setRefreshCallback","setInfiniteCallback","clean","asyncPush","syncPush","asyncPop","syncPop","asyncPrepend","syncPrepend","asyncRefresh","syncRefresh","hasMoreData","getItems","setupSearch","updateSearchCriteria","getAncestor","$loader","show","hide","$refresher","$moreLoader","$router","go","$render","ready","destroy","asyncDigest","$navBar","getState","setState","$modal","setData","getData","build","$popover","onHidden","$popup","confirm","prompt","alert","$progressBar","create","reset","createInfinite","onProgress","destroyInfinite","showAbort","$alertify","$history","goBack","ClassBuilder","dependencies.Class","_","ListMediator","extend","Properties","settings","self","this","_settings","_viewInstance","_dataProvider","dataProvider","_dataParams","dataParams","_deepCopy","deepCopy","_useModel","useModel","_enableRefresh","enableRefresh","_enableInfinite","enableInfinite","_stateContext","_isInit","_isLoadingData","generateItemsInternal","collection","newData","forEach","item","push","attributes","safelyReadDataProvider","models","oneItem","generateItems","async","onUpdateView","add","source","data","loadInitData","promise","getFirstPage","tojQueryDeferred","always","then","hasNextPage","renderData","refresh","isProgramatic","prms","loadMore","liftIntoPromise","getNextPage","stateChanged","stateContext","enableSearch","searchModel","isConfirmed","hashCode","searchCriteria","updateStateAndReload","generateFilter","filter","setUp","options","searchSettings","searchURL","searchModelGuid","tearDown","off","attachView","viewInstance","dataId","detachView","_defaultStartService","startServiceImpl","startService","viewInsance","fromCache","stopService","NgStoreListMediator","_super","_ngStore","setNgStore","store","getNgStore","subscription","subscribe","savedData","items","setTimeout","unsubscribe","backbone","dependencies.backbone","WritableListMediator","CollectionCtor","Collection","_viewLevelData","_viewProviderListeners","_globalProvider","globalProvider","_globalProviderListeners","_filterFlags","filterFlags","added","removed","updated","globalProviderFilter","evtCtx","changeSet","rest","changes","length","merged","findAtIndex","newModel","onGlobalProviderUpdate","args","arguments","apply","candidate","thisItem","some","thatItem","id","each","v","k","atIndex","at","remove","merge","trigger","onViewProviderUpdate","startListeningGlobalProvider","onUpdate","defer","update","on","stopListeningGlobalProvider","listeners","key","hasOwnProperty","startListeningViewProvider","stopListeningViewProvider","elem","silent","RxjsPoweredWritableListMediator","_globalSubr","_emitEventDelay","eventObserver","fromEvent","ctrlObserver","pipe","debounceTime","buffer","map","col","mergeArgs","finalSet","pushArray","ListControllerCtor","Defaults","MediatorCtor","_isFirstTimeRendered","_mediator","mediator","_mediatorFromCache","initMediator","setupMediator","start"],"mappings":"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","sourcesContent":["import * as dependencies from '@polpware/fe-dependencies';\r\n\r\nimport { IViewInstance } from './interfaces';\r\n\r\nconst _ = dependencies.underscore;\r\nconst noop = _.noop;\r\n\r\nexport const noopViewInstance: IViewInstance = {\r\n    $data: {\r\n        init: noop,\r\n        setRefreshCallback: noop,\r\n        setInfiniteCallback: noop,\r\n        clean: noop,\r\n        asyncPush: noop,\r\n        syncPush: noop,\r\n        asyncPop: noop,\r\n        syncPop: noop,\r\n        asyncPrepend: noop,\r\n        syncPrepend: noop,\r\n        asyncRefresh: noop,\r\n        syncRefresh: noop,\r\n        hasMoreData: noop,\r\n        getItems: noop,\r\n        setupSearch: noop,\r\n        updateSearchCriteria: noop,\r\n        getAncestor: noop\r\n    },\r\n    $loader: {\r\n        show: noop,\r\n        hide: noop\r\n    },\r\n    $refresher: {\r\n        show: noop,\r\n        hide: noop\r\n    },\r\n    $moreLoader: {\r\n        show: noop,\r\n        hide: noop\r\n    },\r\n    $router: {\r\n        go: noop\r\n    },\r\n    $render: {\r\n        ready: noop,\r\n        destroy: noop,\r\n        asyncDigest: noop\r\n    },\r\n    $navBar: {\r\n        /**\r\n         * Get current state\r\n         * @returns {}\r\n         */\r\n        getState: noop,\r\n        /**\r\n         * Set state\r\n         * @param {Boolean} s\r\n         */\r\n        setState: noop\r\n    },\r\n    $modal: {\r\n        setData: noop,\r\n        getData: noop,\r\n        build: noop\r\n    },\r\n    $popover: {\r\n        setData: noop,\r\n        getData: noop,\r\n        build: noop,\r\n        onHidden: noop\r\n    },\r\n    $popup: {\r\n        setData: noop,\r\n        getData: noop,\r\n        build: noop,\r\n        confirm: noop,\r\n        prompt: noop,\r\n        alert: noop\r\n    },\r\n    $progressBar: {\r\n        create: noop,\r\n        reset: noop,\r\n        createInfinite: noop,\r\n        onProgress: noop,\r\n        destroy: noop,\r\n        destroyInfinite: noop,\r\n        showAbort: noop\r\n    },\r\n    $alertify: noop,\r\n    $history: {\r\n        goBack: noop\r\n    }\r\n};\r\n","/**\n * @fileOverview\n * An mediator (named after the mediator pattern)\n * which coordinates views and controllers.\n * We support the following use cases:\n * 1. A page is first time loaded and then rendered\n * 2. A page is refreshed by pulling down\n * 3. A page is rendered with more data\n * 4. A page is updated after some state has changed\n *\n * Note that this is an sbtract class; you cannot create an instance of it.\n */\n\nimport * as dependencies from '@polpware/fe-dependencies';\n\nconst ClassBuilder = dependencies.Class;\n\nimport { lift as liftIntoPromise, tojQueryDeferred } from '@polpware/fe-utilities';\n\nimport { IViewInstance } from './interfaces';\nimport { noopViewInstance } from './noop-view-instance';\n\nconst _ = dependencies.underscore;\n\nexport interface IListMediatorCtorOptions {\n    dataProvider?: any;\n    dataParams?: any;\n    deepCopy?: boolean;\n    useModel?: boolean;\n    enableRefresh: boolean;\n    enableInfinite: boolean;\n}\n\nexport interface IListMediatorPublic {\n\n    dataProvider(value?: any): any;\n    dataParams(value?: any): any;\n\n    viewInsance(value?: IViewInstance): IViewInstance;\n\n    startService(viewInsance: IViewInstance, fromCache?: boolean): void;\n    stopService(): void;\n\n    loadInitData(): PromiseLike<any>;\n    refresh(isProgramatic?: boolean): PromiseLike<any>;\n    loadMore(): PromiseLike<any>;\n\n    renderData(async?: boolean): void;\n\n    setUp(options?: any): void;\n    tearDown(): void;\n}\n\nexport interface IListMediatorDev extends IListMediatorPublic {\n    _settings: IListMediatorCtorOptions;\n    _viewInstance: IViewInstance;\n    _dataProvider: any;\n    _dataParams: any;\n    _deepCopy: boolean;\n    _useModel: boolean;\n    _enableRefresh: boolean;\n    _enableInfinite: boolean;\n\n    _stateContext: any;\n\n    _isInit: boolean;\n    _isLoadingData: boolean;\n\n    safelyReadDataProvider(): any[];\n    generateItemsInternal(collection: any): any[];\n\n    onUpdateView(evt: any): any;\n    generateItems(async?: boolean): void;\n\n    _defaultStartService(): void;\n\n    attachView(viewInstance): void;\n    detachView(): void;\n\n    startServiceImpl(): void;\n}\n\nexport const ListMediator = ClassBuilder.extend({\n\n    Properties: 'dataProvider,dataParams,deepCopy,useModel,enableRefresh,enableInfinite,onUpdateView,viewInstance',\n\n    init: function(settings: IListMediatorCtorOptions) {\n        const self: IListMediatorDev = this;\n        self._settings = settings;\n        self._viewInstance = noopViewInstance;\n        self._dataProvider = settings.dataProvider || null;\n        self._dataParams = settings.dataParams || {};\n        self._deepCopy = settings.deepCopy || false;\n        self._useModel = settings.useModel || false;\n        self._enableRefresh = settings.enableRefresh || false;\n        self._enableInfinite = settings.enableInfinite || false;\n\n        self._stateContext = {};\n        self._isInit = true;\n        self._isLoadingData = false;\n    },\n\n    generateItemsInternal: function(collection): any[] {\n        const self: IListMediatorDev = this;\n        const newData = [];\n        if (self._useModel) {\n            collection.forEach(function(item) {\n                newData.push(item);\n            });\n        } else if (self._deepCopy) {\n            collection.forEach(function(item) {\n                newData.push(_.extend({}, item.attributes));\n            });\n        } else {\n            collection.forEach(function(item) {\n                newData.push(item.attributes);\n            });\n        }\n        return newData;\n    },\n\n\n    /**\n     * Computes the set of models in the current data provider.\n     * Note that we support all kinds of data providers, backbone\n     * or something similar backbone.\n     * Moreover, this method may be overriden.\n     * @returns {Array}\n     */\n    safelyReadDataProvider: function(): any[] {\n        const self: IListMediatorDev = this;\n        let models: any;\n        if (self._dataProvider.models) {\n            models = self._dataProvider.models;\n        } else {\n            models = [];\n            self._dataProvider.forEach(function(oneItem) {\n                models.push(oneItem);\n            });\n        }\n        return models;\n    },\n\n    /**\n     * Generates the items for the view\n     * Note that we only perform the checking in this method;\n     * it is Not necessary to peform this kind of checking in other overriden generateItems.\n     * @param {Boolean} async\n     * @returns {}\n     */\n    generateItems: function(async): void {\n        const self: IListMediatorDev = this;\n        const $data = self._viewInstance.$data;\n        const models = self.safelyReadDataProvider();\n        const newData = self.generateItemsInternal(models);\n        // newData is ready\n        if (async === true) {\n            self.onUpdateView({\n                add: true,\n                source: 'remote',\n                data: newData\n            });\n            $data.asyncPush(newData);\n        } else {\n            self.onUpdateView({\n                add: true,\n                source: 'cache',\n                data: newData\n            });\n            $data.syncPush(newData);\n        }\n    },\n\n    /**\n     * Load the first page of data from the server,\n     * without any loading indicator;\n     * This method is used internally.\n     * @function loadInitData\n     * @returns {Promise}\n     */\n    loadInitData: function(): PromiseLike<any> {\n        const self: IListMediatorDev = this;\n\n        const dataProvider = self._dataProvider;\n        // We must reset data beforehand\n        dataProvider.reset();\n        // There are side effects if a parameter is passed in get*page\n        // Therefore, we need to clone a new copy of this parameter\n        self._isLoadingData = true;\n\n        const dataParams = self._dataParams;\n        let promise = dataProvider.getFirstPage({ data: _.extend({}, dataParams) });\n        promise = tojQueryDeferred(promise);\n        promise.always(function() {\n            self._isInit = false;\n            self._isLoadingData = false;\n        });\n\n        return promise.then(function() {\n            const $data = self._viewInstance.$data;\n            $data.clean();\n            $data.hasMoreData(dataProvider.hasNextPage());\n            self.generateItems(true /*aync*/);\n            // To ensure that isLoadingData happends very late.\n        });\n    },\n\n    /**\n     * Render data without any loading operations. By default, this is invoked\n     * in the context of non-async mode.\n     * @param {Boolean} async\n     * @function renderData\n     */\n    renderData: function(async?: boolean): void {\n        const self: IListMediatorDev = this;\n        const $data = self._viewInstance.$data;\n        $data.clean();\n        $data.hasMoreData(self._dataProvider.hasNextPage());\n        self.generateItems(async === true);\n    },\n\n    /**\n     * Reloads data as the result of pulling down operation.\n     * It assumes that the user has pulled down the page, thus resetting the refreshing\n     * indicator at the end.\n     * @param isProgramatic {Boolean} Indicates if this invocation\n     * is due to an internal call, without user interaction.\n     * @function refresh\n     */\n    refresh: function(isProgramatic?: boolean): PromiseLike<any> {\n        const self: IListMediatorDev = this;\n        const $data = self._viewInstance.$data;\n        const $refresher = self._viewInstance.$refresher;\n        $data.hasMoreData(true);\n        // Refresh loader\n        $refresher.show(isProgramatic);\n        const prms = self.loadInitData();\n        const anotherP = tojQueryDeferred(prms);\n        return anotherP.always(function() {\n            $refresher.hide(isProgramatic);\n        });\n    },\n\n    /**\n     * Loads more data as the result of scrolling down.\n     * It assumes that the user has scroll down enough, thus resetting the loading more\n     * indicator at the end.\n     * @function loadMore\n     */\n    loadMore: function(): PromiseLike<any> {\n\n        const self: IListMediatorDev = this;\n        const dataProvider = self._dataProvider;\n        const dataParams = self._dataParams;\n        const $data = self._viewInstance.$data;\n        const $moreLoader = self._viewInstance.$moreLoader;\n\n        // loadMore may be issued before init\n        if (self._isInit) {\n            $moreLoader.hide();\n            return liftIntoPromise(true, null);\n        }\n\n        if (self._isLoadingData) {\n            // We do not disable infinite scroll complete ...\n            // because we want to prevent from two time loadMore\n            // and one disable finally is sufficient to remove inifinite scroll indicator.\n            return liftIntoPromise(true, null);\n        }\n\n        if (!dataProvider.hasNextPage()) {\n            $data.hasMoreData(false);\n            $moreLoader.hide();\n            return liftIntoPromise(true, null);\n        }\n\n        $moreLoader.show();\n\n        // We must clone a copy dataParams, as there are side\n        // effects in this parameter\n        self._isLoadingData = true;\n        const prms = dataProvider.getNextPage({ data: _.extend({}, dataParams) }).then(function() {\n            $data.hasMoreData(dataProvider.hasNextPage());\n            self.generateItems(true /* async */);\n            // To ensure that isLoading happends very later, we have to put isLoading in two functions.\n            self._isLoadingData = false;\n        }, function() {\n            self._isLoadingData = false;\n        });\n        const anotherP = tojQueryDeferred(prms);\n\n        return anotherP.always(function() {\n            $moreLoader.hide();\n        });\n    },\n\n    /**\n     * Check if the context for the data provider has changed, for\n     * the purpose of deciding if we need to reload data.\n     * @function stateChanged\n     * @returns {Boolean}\n     */\n    stateChanged: function() {\n        const stateContext = this._stateContext;\n        if (stateContext.enableSearch === true) {\n            return stateContext.searchModel.isConfirmed() && stateContext.searchModel.hashCode() !== stateContext.searchCriteria.hashCode;\n        }\n        return true;\n    },\n\n    /**\n     * Updates state and reload data, with loading indicator if set\n     * @function updateStateAndReload\n     */\n    updateStateAndReload: function() {\n        const self = this;\n        const stateContext = self._stateContext;\n        const $data = self._viewInstance.$data;\n        const $loader = self._viewInstance.$loader;\n        if (stateContext.enableSearch === true) {\n            stateContext.searchCriteria = stateContext.searchModel.generateFilter();\n            self.dataParams(stateContext.searchCriteria.filter);\n            $data.updateSearchCriteria(stateContext.searchCriteria);\n        }\n        $loader.show();\n        const prms = self.loadInitData();\n        const anotherP = tojQueryDeferred(prms);\n\n        anotherP.always(function() {\n            $loader.hide();\n        });\n    },\n\n    /**\n     * Sets up context and hooks up data with view.\n     * This method is only invoked once and should be one of the steps following constructor.\n     * In other words, it is part of a constructor.\n     * @param {Object} options\n     */\n    setUp: function(options) {\n        const self = this;\n\n        options = options || {};\n\n        if (options.enableSearch) {\n            self._stateContext.enableSearch = true;\n            // We expect the following properties\n            // chai.expect(options).to.have.property('searchSettings');\n            // chai.expect(options.searchSettings).to.have.property('searchModel');\n            // chai.expect(options.searchSettings).to.have.property('searchModelGuid');\n            // chai.expect(options.searchSettings).to.have.property('searchURL');\n            // Create our state context\n            // Keep the search settings into the state context,\n            // because these settings are used later for deciding if we\n            // need to recompute data parameters or not\n            const searchSettings = options.searchSettings;\n            self._stateContext.searchURL = searchSettings.searchURL;\n            self._stateContext.searchModelGuid = searchSettings.searchModelGuid;\n            self._stateContext.searchModel = searchSettings.searchModel;\n            self._stateContext.searchCriteria = searchSettings.searchModel.generateFilter();\n            self.dataParams(self._stateContext.searchCriteria.filter);\n        }\n    },\n\n    /**\n     * A destructor.\n     */\n    tearDown: function() {\n        const self: IListMediatorDev = this;\n        if (self._dataProvider && self._dataProvider.off) {\n            // Discard all listening\n            self._dataProvider.off('all');\n            // Discard all data\n            self._dataProvider.reset();\n        }\n    },\n\n    /**\n     * Start to bind a view to this mediator.\n     */\n    attachView: function(viewInstance): void {\n        const self: IListMediatorDev = this;\n        self._viewInstance = viewInstance;\n\n        const $data = self._viewInstance.$data;\n        if (self._enableRefresh) {\n            $data.setRefreshCallback(function() {\n                self.refresh();\n            });\n        }\n        if (self._enableInfinite) {\n            $data.setInfiniteCallback(function() {\n                self.loadMore();\n            });\n        }\n        if (self._stateContext.enableSearch) {\n            $data.setupSearch(self._stateContext.searchCriteria, function() {\n                self._viewInstance.$router.go(self._stateContext.searchURL, {\n                    dataId: self._stateContext.searchModelGuid\n                });\n            });\n        }\n\n        $data.init();\n    },\n\n    detachView: function(): void {\n        const self: IListMediatorDev = this;\n        self._viewInstance = noopViewInstance;\n    },\n\n    _defaultStartService: function(): void {\n        const self: IListMediatorDev = this;\n        const $loader = self._viewInstance.$loader;\n        $loader.show();\n        const promise = self.loadInitData();\n        const anotherP = tojQueryDeferred(promise);\n        anotherP.always(function() {\n            $loader.hide();\n        });\n    },\n\n    /**\n     * This method needs to be overrided.\n     */\n    startServiceImpl: function(): void {\n        const self: IListMediatorDev = this;\n        self._defaultStartService();\n    },\n\n    startService: function(viewInsance: IViewInstance, fromCache?: boolean): void {\n        const self: IListMediatorDev = this;\n        self.attachView(viewInsance);\n        if (fromCache === true) {\n            self.renderData();\n        } else {\n            self.startServiceImpl();\n        }\n    },\n\n    stopService: function(): void {\n        const self = this;\n        self.detachView();\n    }\n\n});\n\n\n\n\n\n\n\n","import {\r\n    ICollectionItem, ICollectionStore\r\n} from '@polpware/fe-data';\r\n\r\n\r\nimport {\r\n    ListMediator,\r\n    IListMediatorCtorOptions,\r\n    IListMediatorPublic,\r\n    IListMediatorDev\r\n} from './abstract-list';\r\n\r\nexport {\r\n    IListMediatorCtorOptions,\r\n} from './abstract-list';\r\n\r\nexport interface INgStoreListMediatorPublic extends IListMediatorPublic {\r\n    setNgStore<T extends ICollectionItem>(store: ICollectionStore<T>): void;\r\n    getNgStore<T extends ICollectionItem>(): ICollectionStore<T>;\r\n}\r\n\r\nexport interface INgStoreListMediatorDev extends IListMediatorDev {\r\n    _ngStore: ICollectionStore<any>;\r\n    _super(value?: any): any;\r\n}\r\n\r\nexport const NgStoreListMediator = ListMediator.extend({\r\n\r\n    init: function(settings: IListMediatorCtorOptions) {\r\n        const self: INgStoreListMediatorDev = this;\r\n        self._super(settings);\r\n        self._ngStore = null;\r\n    },\r\n\r\n    setNgStore: function <T extends ICollectionItem>(store: ICollectionStore<T>): void {\r\n        const self: INgStoreListMediatorDev = this;\r\n        self._ngStore = store;\r\n    },\r\n\r\n    getNgStore: function <T extends ICollectionItem>(): ICollectionStore<T> {\r\n        const self: INgStoreListMediatorDev = this;\r\n        return self._ngStore;\r\n    },\r\n\r\n    safelyReadDataProvider: function(): any[] {\r\n        const self: INgStoreListMediatorDev = this;\r\n        const models = self._super();\r\n        // Safely push these models into view level data provider\r\n        self._ngStore.add(models);\r\n        // Then return\r\n        return models;\r\n    },\r\n\r\n    /**\r\n     * Override.\r\n     * This method uses the data from the ngstore, instead of the\r\n     * the current remote data provider, to generate the list of data\r\n     * to be rendered.\r\n     */\r\n    renderData: function(async?: boolean) {\r\n        const self: INgStoreListMediatorDev = this;\r\n        const $data = self._viewInstance.$data;\r\n        $data.clean();\r\n        $data.hasMoreData(self._dataProvider.hasNextPage());\r\n\r\n        const subscription = self._ngStore.getState().subscribe(savedData => {\r\n\r\n            const newData = self.generateItemsInternal(savedData.items);\r\n            if (async === true) {\r\n                $data.asyncPush(newData);\r\n            } else {\r\n                $data.syncPush(newData);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                subscription.unsubscribe();\r\n            }, 1);\r\n        });\r\n    }\r\n\r\n});\r\n","/**\n * @fileOverview\n * This module implements a list mediator that may quickly\n * get updated on any operation in this list.\n * E.g., add, remove, update\n */\n\n\nimport * as dependencies from '@polpware/fe-dependencies';\nimport {\n    ListMediator,\n    IListMediatorCtorOptions,\n    IListMediatorPublic,\n    IListMediatorDev\n} from './abstract-list';\n\nconst _ = dependencies.underscore;\nconst backbone = dependencies.backbone;\n\nexport interface IChangeSet {\n    changes: {\n        added: any[],\n        removed: any[],\n        merged: any[]\n    };\n}\n\nexport interface IWritableListMediatorCtorOptions\n    extends IListMediatorCtorOptions {\n    globalProvider?: any;\n    filterFlags?: {\n        added?: boolean,\n        removed?: boolean,\n        updated?: boolean\n    };\n}\n\nexport interface IWritableListMediatorPublic\n    extends IListMediatorPublic {\n\n    viewLevelData(value?: any): any;\n    globalProvider(value?: any): any;\n\n    globalProviderFilter(evtCtx: any, changeSet: IChangeSet, rest: any): IChangeSet;\n}\n\nexport interface IWritableListMediatorDev extends IListMediatorDev {\n    _viewLevelData: any;\n    _viewProviderListeners: any;\n    _globalProvider: any;\n    _globalProviderListeners: any;\n    _filterFlags: {\n        added?: boolean,\n        removed?: boolean,\n        updated?: boolean\n    };\n\n    _super(value?: any): any;\n\n    globalProviderFilter(evtCtx: any, changeSet: IChangeSet, rest: any): IChangeSet;\n    onGlobalProviderUpdate();\n\n    onViewProviderUpdate(evtCtx: any, changeSet: IChangeSet, rest: any): void;\n\n    startListeningGlobalProvider(globalProvider);\n    stopListeningGlobalProvider();\n\n    startListeningViewProvider();\n    stopListeningViewProvider();\n\n    findAtIndex(newModel: any): number;\n}\n\nexport const WritableListMediator = ListMediator.extend({\n\n    Properties: 'viewLevelData,globalProvider',\n\n    init: function(settings: IWritableListMediatorCtorOptions) {\n        const self: IWritableListMediatorDev = this;\n        self._super(settings);\n\n        const CollectionCtor = backbone.Collection.extend();\n        self._viewLevelData = new CollectionCtor();\n        self._viewProviderListeners = {};\n        self._globalProvider = settings.globalProvider || null;\n        self._globalProviderListeners = {};\n        self._filterFlags = settings.filterFlags || { added: true, removed: true, updated: true };\n    },\n\n    /**\n     * A filter on the global data provider.\n     * @returns {Boolean}\n     */\n    globalProviderFilter: function(evtCtx: any, changeSet: IChangeSet, rest: any): IChangeSet {\n        /*jslint unparam:true */\n        const self: IWritableListMediatorDev = this;\n        if (self._filterFlags.added &&\n            changeSet.changes.added &&\n            changeSet.changes.added.length > 0) {\n            return changeSet;\n        }\n        if (self._filterFlags.removed &&\n            changeSet.changes.removed &&\n            changeSet.changes.removed.length > 0) {\n            return changeSet;\n        }\n        if (self._filterFlags.updated &&\n            changeSet.changes.merged &&\n            changeSet.changes.merged.length > 0) {\n            return changeSet;\n        }\n        return null;\n    },\n\n\n    findAtIndex: function(newModel): number {\n        return -1;\n    },\n\n    /**\n     * An internal method for listening to any change on the\n     * global provider. Listening to the sole update event is\n     * sufficient and efficent.\n     * @param {Object} args\n     */\n    onGlobalProviderUpdate: function() {\n        /*jslint unparam:true */\n        const self: IWritableListMediatorDev = this;\n        const args = arguments;\n\n        // If we are loading data, the data we are receiving is\n        // the result of the current loading behavior.\n        // We do not need to do anything. Instead, the loading behavior\n        // is responsible for rending data.\n        if (self._isLoadingData) {\n            return;\n        }\n        // Shortcircuit\n        const changeSet = self.globalProviderFilter.apply(self, args);\n        if (!changeSet) {\n            return;\n        }\n        // The interface of changeSet is determined by the above filter\n        // method. However, the below view provider listener must be careful.\n        // Changes\n        if (changeSet.add) {\n            const candidate = _.filter(changeSet.changes.added, function(thisItem) {\n                return !_.some(self._viewLevelData.models, function(thatItem) {\n                    return thisItem.id === thatItem.id;\n                });\n            });\n            if (candidate.length > 0) {\n                _.each(candidate, function(v, k) {\n                    const atIndex = self.findAtIndex(v);\n                    if (atIndex !== -1) {\n                        self._viewLevelData.add(v, { at: atIndex });\n                    } else {\n                        self._viewLevelData.add(v);\n                    }\n                });\n            }\n        }\n        if (changeSet.remove) {\n            self._viewLevelData.remove(changeSet.changes.removed);\n        }\n        if (changeSet.merge) {\n            // Keep propagating\n            self._viewLevelData.trigger('update', changeSet.changes);\n        }\n    },\n\n    /**\n     * An internal method for listening to the change on the view\n     * data provider. Usually, such kind of listening shall be stopped\n     * when there is no view binding to the current midiator list.\n     * @param {Object} args\n     */\n    onViewProviderUpdate: function(evtCtx: any, changeSet: IChangeSet, rest: any): void {\n        /*jslint unparam:true */\n        const self: IWritableListMediatorDev = this;\n        const $data = self._viewInstance.$data;\n        let newData: any;\n        // Note that the interface of changeSet varies from\n        // events to events in Backbone. We have to be very careful.\n        if (changeSet.changes.added && changeSet.changes.added.length > 0) {\n            // Check if we have data or not\n            newData = self.generateItemsInternal(changeSet.changes.added);\n            self.onUpdateView({\n                add: true,\n                source: 'event',\n                data: newData\n            });\n            $data.asyncPrepend(newData);\n        }\n        if (changeSet.changes.removed && changeSet.changes.removed.length > 0) {\n            newData = self.generateItemsInternal(changeSet.changes.removed);\n            self.onUpdateView({\n                remove: true,\n                source: 'event',\n                data: newData\n            });\n            $data.asyncPop(newData);\n        }\n        if (changeSet.changes.merged && changeSet.changes.merged.length > 0) {\n            newData = self.generateItemsInternal(changeSet.changes.merged);\n            self.onUpdateView({\n                merge: true,\n                source: 'event',\n                data: newData\n            });\n            $data.asyncRefresh(newData);\n        }\n    },\n\n    /**\n     * Override.\n     * So that we can clean up the view data.\n     */\n    loadInitData: function() {\n        const self: IWritableListMediatorDev = this;\n        self._viewLevelData.reset();\n        return self._super();\n    },\n\n\n    /**\n     * Starts to listen to the change on the global provider.\n     * It is usually used internally on setting up this mediator.\n     * @param {Object} globalProvider\n     */\n    startListeningGlobalProvider: function(globalProvider) {\n        const self: IWritableListMediatorDev = this;\n        const onUpdate = function() {\n            const args = arguments;\n            // We have to schedule such update so that some other operations can\n            // been completed first. E.g., getForeignModel should be set up.\n            _.defer(function() {\n                self.onGlobalProviderUpdate.apply(self, args);\n            });\n        };\n        self._globalProviderListeners = {\n            update: onUpdate\n        };\n        self._globalProvider = globalProvider;\n        globalProvider.on('update', onUpdate);\n    },\n\n    /**\n     * Stops listening to the change on the global provider.\n     * It is usally used on the tearing down this mediator.\n     */\n    stopListeningGlobalProvider: function() {\n        const self: IWritableListMediatorDev = this;\n        const listeners = self._globalProviderListeners;\n        const globalProvider = self._globalProvider;\n        for (const key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                globalProvider.off(key, listeners[key]);\n            }\n        }\n    },\n\n    /**\n     * Start to listen to the change on the view data provider.\n     * This method is invoked on binding a view to this mediator.\n     */\n    startListeningViewProvider: function() {\n        const self: IWritableListMediatorDev = this;\n        const onUpdate = function(evtCtx, changeSet, rest) {\n            self.onViewProviderUpdate(evtCtx, changeSet, rest);\n        };\n        self._viewProviderListeners = {\n            update: onUpdate\n        };\n        self._viewLevelData.on('update', onUpdate);\n    },\n\n    /**\n     * Stops listening to the change on the view data provider.\n     * This method is invoked on unbinding a view to this mediator.\n     */\n    stopListeningViewProvider: function() {\n        const self: IWritableListMediatorDev = this;\n        const listeners = self._viewProviderListeners;\n        for (const key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                self._viewLevelData.off(key, listeners[key]);\n            }\n        }\n    },\n\n    /**\n     * Override.\n     * Compared its base counterpart, this method performs additional\n     * checking on generating data for the view module, so that no repeated\n     * items may be generated.\n     * Simply because, the data in the view level data is distinct.\n     * @returns {Array}\n     */\n    safelyReadDataProvider: function(): any[] {\n        const self: IWritableListMediatorDev = this;\n        let models = self._super();\n        models = _.filter(models, function(elem) {\n            return !_.some(self._viewLevelData.models, function(item) {\n                return item.id === elem.id;\n            });\n        });\n        // Safely push these models into view level data provider\n        self._viewLevelData.add(models, { silent: true });\n        // Then return\n        return models;\n    },\n\n    /**\n     * Override.\n     * This method uses the data from the view level data, instead of the\n     * the current remote data provider, to generate the list of data\n     * to be rendered.\n     */\n    renderData: function(async?: boolean) {\n        const self: IWritableListMediatorDev = this;\n        const $data = self._viewInstance.$data;\n        $data.clean();\n        $data.hasMoreData(self._dataProvider.hasNextPage());\n        const newData = self.generateItemsInternal(self._viewLevelData.models);\n        if (async === true) {\n            $data.asyncPush(newData);\n        } else {\n            $data.syncPush(newData);\n        }\n    },\n\n    /**\n     * Override\n     * @param {} options\n     */\n    setUp: function(options) {\n        const self: IWritableListMediatorDev = this;\n        self._super(options);\n        if (self._globalProvider) {\n            self.startListeningGlobalProvider(self._globalProvider);\n        }\n    },\n\n    /**\n     * Override\n     */\n    tearDown: function() {\n        const self: IWritableListMediatorDev = this;\n        // Call super\n        self._super();\n        // Tear off what we introduce in this class\n        self._viewLevelData.off('all');\n        self._viewLevelData.reset();\n        // Stop listening to the global\n        if (self._globalProvider) {\n            self.stopListeningGlobalProvider();\n        }\n    },\n\n    /**\n     * Override\n     */\n    attachView: function(viewInstance) {\n        const self: IWritableListMediatorDev = this;\n        self._super(viewInstance);\n        // Start to listen to changes on the view data provider.\n        self.startListeningViewProvider();\n    },\n\n    /**\n     * Override\n     */\n    detachView: function() {\n        const self: IWritableListMediatorDev = this;\n        self._super();\n        self.stopListeningViewProvider();\n    }\n});\n","import { fromEvent, Subscription } from 'rxjs';\nimport { debounceTime, buffer, map } from 'rxjs/operators';\n\nimport * as hInterface from '@polpware/fe-dependencies';\n\nimport { pushArray } from '@polpware/fe-utilities';\n\nimport {\n    IWritableListMediatorDev,\n    IChangeSet,\n    WritableListMediator,\n    IWritableListMediatorCtorOptions\n} from './writable-abstract-list';\n\nconst _ = hInterface.underscore;\n\nexport interface IRxjsPoweredDirContentMediatorDev extends IWritableListMediatorDev {\n    _emitEventDelay: number;\n    _globalSubr: Subscription;\n}\n\ninterface IFullChangeSet extends IChangeSet {\n    add: boolean;\n    remove: boolean;\n    merge: boolean;\n}\n\nfunction mergeArgs(data: any[]): IChangeSet {\n    const finalSet: IFullChangeSet = {\n        add: false,\n        remove: false,\n        merge: false,\n        changes: {\n            added: [],\n            removed: [],\n            merged: []\n        }\n    };\n    data.forEach((elem: any[]) => {\n        const changeSet: IChangeSet = elem[1];\n        if (changeSet.changes.added && changeSet.changes.added.length > 0) {\n            pushArray(finalSet.changes.added, changeSet.changes.added);\n            finalSet.add = true;\n        }\n        if (changeSet.changes.removed && changeSet.changes.removed.length > 0) {\n            pushArray(finalSet.changes.removed, changeSet.changes.removed);\n            finalSet.remove = true;\n        }\n        if (changeSet.changes.merged && changeSet.changes.merged.length > 0) {\n            pushArray(finalSet.changes.merged, changeSet.changes.merged);\n            finalSet.merge = true;\n        }\n    });\n\n    return finalSet;\n}\n\nexport const RxjsPoweredWritableListMediator = WritableListMediator.extend({\n    Properties: 'globalSubr, emitEventDelay',\n\n    init: function(settings: IWritableListMediatorCtorOptions) {\n        const self: IRxjsPoweredDirContentMediatorDev = this;\n        self._super(settings);\n        self._globalSubr = null;\n        self._emitEventDelay = 1000;\n    },\n\n    /**\n         * Starts to listen to the change on the global provider.\n         * It is usually used internally on setting up this mediator.\n         * @param {Object} globalProvider\n         */\n    startListeningGlobalProvider: function(globalProvider) {\n        const self: IRxjsPoweredDirContentMediatorDev = this;\n        self._globalProvider = globalProvider;\n\n        const eventObserver = fromEvent(globalProvider, 'update');\n        const ctrlObserver = eventObserver.pipe(debounceTime(self._emitEventDelay));\n\n        self._globalSubr = eventObserver.pipe(\n            buffer(ctrlObserver),\n            map((col) => {\n                const x = mergeArgs(col);\n                return x;\n            })\n        ).subscribe(args => {\n            self.onGlobalProviderUpdate.apply(self, [null, args]);\n        });\n    },\n\n    /**\n        * Stops listening to the change on the global provider.\n        * It is usally used on the tearing down this mediator.\n        */\n    stopListeningGlobalProvider: function() {\n        const self: IRxjsPoweredDirContentMediatorDev = this;\n        const globalProvider = self._globalProvider;\n        if (self._globalSubr) {\n            self._globalSubr.unsubscribe();\n            self._globalSubr = null;\n        }\n    }\n\n});\n\n","import * as dependencies from '@polpware/fe-dependencies';\n\nconst ClassBuilder = dependencies.Class;\n\n\nexport const ListControllerCtor = ClassBuilder.extend({\n\n    Defaults: {\n        MediatorCtor: null\n    },\n\n    Properties: 'mediator,settings',\n\n    /**\n     * Constructor\n     * @param {Object} settings\n     */\n    init: function(settings) {\n        var self = this;\n        // We expect the following properties\n\n        self._settings = settings;\n        self._isFirstTimeRendered = true;\n        self._mediator = settings.mediator || null;\n        self._mediatorFromCache = !!self._mediator;\n    },\n\n    initMediator: function() {\n        var self,\n            settings,\n            mediator,\n            MediatorCtor;\n        self = this;\n        if (self._mediator) {\n            return self;\n        }\n        settings = self._settings;\n        MediatorCtor = self.Defaults.MediatorCtor;\n        mediator = new MediatorCtor(settings);\n        // Setup mediator\n        self.setupMediator(mediator);\n\n        self._mediator = mediator;\n        return self;\n    },\n\n    setupMediator: function(mediator) {\n        mediator.setUp();\n    },\n\n    start: function() {\n        var self,\n            settings,\n            mediator;\n\n        self = this;\n        settings = self._settings;\n        mediator = self._mediator;\n\n        // Set up destroy\n        settings.$render.destroy(function() {\n            mediator.stopService();\n        });\n\n        settings.$render.ready(function() {\n            if (self._isFirstTimeRendered) {\n                self._isFirstTimeRendered = false;\n                mediator.startService(settings, self._mediatorFromCache);\n            }\n        });\n    }\n});\n\n"]}